{"ast":null,"code":"import _slicedToArray from \"/Users/benwang/Desktop/NYCU_CS/112spring/cloud/final/Cloudnative_Final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/benwang/Desktop/NYCU_CS/112spring/cloud/final/Cloudnative_Final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/benwang/Desktop/NYCU_CS/112spring/cloud/final/Cloudnative_Final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from \"../helpers/propTypes\";\nimport UncontrolledTabs from \"./UncontrolledTabs\";\nimport { getTabsCount } from \"../helpers/count\";\nvar MODE_CONTROLLED = 0;\nvar MODE_UNCONTROLLED = 1;\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  direction: PropTypes.oneOf([\"rtl\", \"ltr\"]),\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  disableLeftRightKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  environment: PropTypes.object,\n  focusTabOnClick: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string\n} : {};\nvar defaultProps = {\n  defaultFocus: false,\n  focusTabOnClick: true,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false,\n  disableLeftRightKeys: false\n};\nvar getModeFromProps = function getModeFromProps(props) {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\nvar checkForIllegalModeChange = function checkForIllegalModeChange(props, mode) {\n  if (process.env.NODE_ENV !== \"production\" && mode != undefined && mode !== getModeFromProps(props)) {\n    throw new Error(\"Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.\");\n  }\n};\nvar Tabs = function Tabs(props) {\n  var _defaultProps$props = _objectSpread({}, defaultProps, props),\n    children = _defaultProps$props.children,\n    defaultFocus = _defaultProps$props.defaultFocus,\n    defaultIndex = _defaultProps$props.defaultIndex,\n    focusTabOnClick = _defaultProps$props.focusTabOnClick,\n    onSelect = _defaultProps$props.onSelect,\n    attributes = _objectWithoutProperties(_defaultProps$props, [\"children\", \"defaultFocus\", \"defaultIndex\", \"focusTabOnClick\", \"onSelect\"]);\n  var _useState = useState(defaultFocus),\n    _useState2 = _slicedToArray(_useState, 2),\n    focus = _useState2[0],\n    setFocus = _useState2[1];\n  var _useState3 = useState(getModeFromProps(attributes)),\n    _useState4 = _slicedToArray(_useState3, 1),\n    mode = _useState4[0];\n  var _useState5 = useState(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedIndex = _useState6[0],\n    setSelectedIndex = _useState6[1];\n  useEffect(function () {\n    setFocus(false);\n  }, []);\n  if (mode === MODE_UNCONTROLLED) {\n    var tabsCount = getTabsCount(children);\n    useEffect(function () {\n      if (selectedIndex != null) {\n        var maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n  checkForIllegalModeChange(attributes, mode);\n  var handleSelected = function handleSelected(index, last, event) {\n    if (typeof onSelect === \"function\") {\n      if (onSelect(index, last, event) === false) return;\n    }\n    if (focusTabOnClick) {\n      setFocus(true);\n    }\n    if (mode === MODE_UNCONTROLLED) {\n      setSelectedIndex(index);\n    }\n  };\n  var subProps = _objectSpread({}, props, attributes);\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  delete subProps.focusTabOnClick;\n  return React.createElement(UncontrolledTabs, subProps, children);\n};\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTabs.tabsRole = \"Tabs\";\nexport default Tabs;","map":null,"metadata":{},"sourceType":"module"}